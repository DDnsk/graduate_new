# coding=utf-8
__author__ = 'nsk'

from class_list import Article

def main(end):
    for i in range(0, end):
        path = 'article_done/article_'+str(i)+'.html'
        try:
            tmp_case = Article(open(path))
            tmp_case.para_clean()
            tmp_case.preprocess_delete_empty_para()
            tmp_case.preprocess_seperate_sentences()
            tmp_case.preprocess_extract_special_elements()
            tmp_case.preprocess_sentence2words()
            tmp_case.preprocess_tables_figures()  # clean unexpected tokens

            # display output
            tmp_case.display_para_obj()
            # tmp_case.display_references()
            # tmp_case.display_tables_figures()
        except:
            print 'error'

def statistic(valid_index_list):
    count_down = 0
    article_obj_list = []
    for i in valid_index_list:
        path = 'article_done/article_'+str(i)+'.html'
        # print path
        try:
            tmp_case = Article(open(path))
            article_obj_list.append(tmp_case)
            # tmp_case.display_test()
        except:
            print '%d is down' % i
            count_down += 1
            continue

    print 'there are 100 articles in total, %d is unable to process' % count_down

def write_valid_html_file_index_list_to_file(valid_index_list):
    """
    :param valid_index_list: valid index of html file which is generated by function:get_valid_html_index_list()
    :return:No return here. The function will write the index of valid html file checked by Article class to file,
    each index in a line.
    """
    file_tmp = open('valid_html_file_index_list.txt', 'w')
    for i in valid_index_list:
        path = 'article_done/article_'+str(i)+'.html'
        try:
            tmp_case = Article(open(path))
            tmp_case.para_clean()
            tmp_case.preprocess_delete_empty_para()
            tmp_case.preprocess_seperate_sentences()
            tmp_case.preprocess_sentence2words()
            if tmp_case.title != '' and tmp_case.title != None and len(tmp_case.sentence_formalized_list) > 150:
                file_tmp.write(str(i)+'\n')
                print i
        except:
            continue

def get_valid_html_index_list():
    """
    :return: valid index of html file. The validity is checked by crawler.
    """
    file_tmp = open('1-1000.csv', 'r')
    valid_html_index_list = []
    for line in file_tmp.readlines():
        seperated_fields_tmp = line.split(',')
        index_now = int(seperated_fields_tmp[0])
        length_now = int(seperated_fields_tmp[-1].strip())
        timeout_or_not = seperated_fields_tmp[-2]
        if length_now > 100000 or timeout_or_not == 'finished':
            valid_html_index_list.append(index_now)
    return valid_html_index_list

def get_valid_index_final():
    """
    :return:list; get the final valid index from file generated by write_valid_html_file_index_list_to_file()
    """
    file_tmp = open('valid_html_file_index_list.txt', 'r')
    valid_index_final = []
    for line in file_tmp.readlines():
        index_now = int(line.strip())
        print index_now
        valid_index_final.append(index_now)
    return valid_index_final

if __name__ == '__main__':
    main(2)


